import streamlit as st
import requests
import time

# Flask API URL - Update with your deployment URL
API_URL = st.secrets.get("API_URL", "http://localhost:5000/chat")

# Streamlit Page Configuration
st.set_page_config(page_title="Career Counseling Chatbot", layout="wide")
st.title("ðŸ¤– Career Counseling Chatbot")
st.markdown("Ask me anything about careers, skills, job trends, or higher studies!")

# Check API Health
try:
    health_response = requests.get(API_URL + "/health")
    if health_response.status_code == 200:
        st.success("API is reachable!")
    else:
        st.error("API is reachable but not responding as expected.")
except requests.exceptions.RequestException:
    st.error("Cannot connect to the chatbot API. Some features may not work.")

# Session State Initialization for Chat History
if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "bot", "text": "Hi! How can I help you today?"}]

# Function to Display Messages with Custom Styling
def display_messages():
    for msg in st.session_state["messages"]:
        if msg["role"] == "user":
            st.markdown(
                f"<div style='text-align: right; color: blue;'><strong>You:</strong> {msg['text']}</div>",
                unsafe_allow_html=True,
            )
        else:
            st.markdown(
                f"<div style='text-align: left; color: green;'><strong>Bot:</strong> {msg['text']}</div>",
                unsafe_allow_html=True,
            )

# Display Existing Messages
display_messages()

# User Input
user_input = st.text_input("Type your message:", key="user_input")

# Spinner for Loading Animation
if st.button("Send"):
    if user_input.strip():
        # Add user message to session state
        st.session_state["messages"].append({"role": "user", "text": user_input.strip()})
        try:
            with st.spinner("Bot is typing..."):
                # API Request
                response = requests.post(API_URL, json={"query": user_input.strip()})
                response.raise_for_status()  # Raise error for HTTP issues
                bot_response = response.json().get("response", "I'm sorry, I couldn't understand that.")
        except requests.exceptions.RequestException:
            bot_response = "I'm experiencing connection issues. Please try again later."
        except ValueError:
            bot_response = "Unexpected response from the server."

        # Add bot response to session state
        st.session_state["messages"].append({"role": "bot", "text": bot_response})

        # Rerun to update the chat interface
        st.experimental_rerun()
    else:
        st.warning("Please enter a message before sending.")

# Option to Download Chat History
if st.button("Download Chat History"):
    chat_history = "\n".join([f"{msg['role'].capitalize()}: {msg['text']}" for msg in st.session_state["messages"]])
    st.download_button("Download Chat History", chat_history, file_name="chat_history.txt")

# Notes to Guide Users
st.markdown(
    """
### Example Questions:
- "What are the best career options for computer science students?"
- "Can you suggest certifications for data science?"
- "What skills do I need for a career in AI?"
- "How can I prepare for a government job?"
"""
)
