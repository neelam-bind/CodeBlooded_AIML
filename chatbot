import streamlit as st
from streamlit_chat import message
from PIL import Image
import json
import pickle
from keras.models import load_model
import nltk

# Download necessary NLTK files
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
from nltk.stem import WordNetLemmatizer

# Initialize lemmatizer
lemmatizer = WordNetLemmatizer()

# Load the trained model and data files
with open('intents3.json', 'r') as f:
    intents = json.load(f)
with open('words.pkl', 'rb') as f:
    words = pickle.load(f)
with open('classes.pkl', 'rb') as f:
    classes = pickle.load(f)

model = load_model('chatbot_model.h5')

# Streamlit page configuration
im = Image.open('bot.jpg')
st.set_page_config(page_title="Career Buddy Chatbot", page_icon=im, layout="wide")

# Custom header styling
st.markdown("""
    <style>
        .header {
            background-color: #FF8C00;
            padding: 20px;
            color: white;
            text-align: center;
            font-size: 40px;
            font-weight: bold;
        }
    </style>
    <div class="header">
        Career Buddy ðŸ¤–
    </div>
""", unsafe_allow_html=True)

# Sidebar information
with st.sidebar:
    st.title("About the Chatbot")
    st.write("""
    This chatbot helps students with career counseling. It was developed by students of VIT-AP:
    - Harshita Bajaj [22MSD7013]
    - Arya Chakraborty [22MSD7020]
    - Rituparno Das [22MSD2027]
    - Shritama Sengupta [22MSD7032]
    - Arundhuti Chakraborty [22MSD7046]
    """)

# Function to preprocess user input
def preprocess_input(input_text):
    input_text = nltk.word_tokenize(input_text)
    input_text = [lemmatizer.lemmatize(word.lower()) for word in input_text if word not in nltk.corpus.stopwords.words('english')]
    return input_text

# Function to convert the sentence to bag of words
def bow_to_vector(sentence, words):
    sentence_bow = [0] * len(words)
    for word in sentence:
        if word in words:
            sentence_bow[words.index(word)] = 1
    return np.array(sentence_bow)

# Predict the class of the input sentence
def predict_class(input_bow, model):
    prediction = model.predict(np.array([input_bow]))[0]
    threshold = 0.25
    predicted_class = [i for i, prob in enumerate(prediction) if prob > threshold]
    return predicted_class

# Function to get a response based on the predicted class
def get_response(predicted_class, intents):
    intent = intents['intents'][predicted_class[0]]
    return intent['responses'][0]  # Return the first response for simplicity

# Initialize session state for tracking conversation
if 'generated' not in st.session_state:
    st.session_state['generated'] = ["Hello! I'm your Career Buddy. How can I assist you today?"]

if 'past' not in st.session_state:
    st.session_state['past'] = ["Hi!"]

# Text input box with CSS customization
st.markdown("""
    <style>
        .stTextInput {
            position: fixed;
            bottom: 10px;
            width: 80%;
            left: 10%;
            padding: 10px;
        }
    </style>
""", unsafe_allow_html=True)

# Display the user and bot's chat history
def display_chat():
    for i in range(len(st.session_state['generated'])):
        message(st.session_state['past'][i], is_user=True, key=str(i) + '_user')
        message(st.session_state['generated'][i], key=str(i))

# Get user input
def get_user_input():
    return st.text_input("You: ", key="input")

# Main chat interaction loop
with st.container():
    user_input = get_user_input()

    if user_input:
        # Preprocess input text
        processed_input = preprocess_input(user_input)

        # Convert to bag of words
        input_bow = bow_to_vector(processed_input, words)

        # Predict class
        predicted_class = predict_class(input_bow, model)

        # Get the response
        response = get_response(predicted_class, intents)

        # Store the user input and response
        st.session_state.past.append(user_input)
        st.session_state.generated.append(response)

    # Display conversation history
    display_chat()

# Optional retry button to reset conversation
if st.button("Start New Conversation"):
    st.session_state.generated = ["Hello! I'm your Career Buddy. How can I assist you today?"]
    st.session_state.past = ["Hi!"]
    st.experimental_rerun()
